

<ul>

	<li> Are you looking for a methodology for effectively solving coding problems? </li>
	<li> Do you get frustrated easily when you don't get easy to medium problems right away? </li>
	<li> Are you taking more than 30 minutes to solve a coding interview problem? </li>
	
	<li> Do you have difficulty remembering something that you learned a couple of weeks back? </li>
	<li> Do you forget how to solve a given problem after a couple of weeks? </li>
	<li> Do you struggle to remember the various concepts and techniques to solve coding challenges in technical interviews? </li>
	<li> Do you forget during the interview? </li>
	
	<li> Do you have trouble with implementing and understanding recursive solutions on data structures like Trees? </li>
	<li> Do you have trouble coming up with dynamic programming solutions? </li>
	
	<li> Do you feel like you don't have enough time to practice thousands of coding problems? </li>
	<li> Do you find the theory used to write down the algorithms difficult to translate into code? </li>
	<li> Are you worried about the amount of focus time you have? </li>
	<li> Do you feel anxious about: What if they ask something else? </li>

	<li> How do you approach new problems? </li>
	<li> How are you going to solve new problems and get through the coding interview? </li>

	<li> Not sure how to divide your time for practice and study? </li>
	<li> Do you feel intimidated by tech interviews? </li>
	
	<li> Are you not good at solving a problem on the spot? </li>
	
	<li> Do you have problems finding the right approach to tackle a coding problem? </li> 		
	<li> Are you looking for techniques to break down coding problems? </li>
	<li> Do you feel overwhelmed by the amount of material you need to master? </li>
	<li> Do you feel anxious and under prepared for the interview? </li>		

	<li> 
		Do you feel too conscious that someone is watching you code during the interview that prevents you from performing well?
	 </li>
	
</ul>



	<p class="lead">

	</p>


	<h3>Asking Questions</h3>

	<p>
		The ability to ask questions is a skill and it is a prerequisite to solve problems. Ask:
	
		<ul>
			<li>What</li>
			<li>How</li>
			<li>Why</li>
		</ul>
	
		These questions will make you reason about the code and gain deeper understanding. Here is some questions to ask:
		
		<ul>
			<li>Wait a minute... How do you know that?</li>
			<li>How do you know that is the right X? Are you sure it is right?</li>
			<li>How do you recognize the type of problem?</li>
			<li>How do you get that?</li>
			<li>Why do you do that?</li>
			<li>So, what does that mean?</li>
			<li>That sounds pretty vague to me.</li>
			<li>Are you sure?</li>
		</ul>		
	</p>


	<h4>Reflection</h4>

	<ul>
		<li>
			What are the key ideas? 		
		</li>
		<li>
			What are some examples? 	
		</li>
		<li>
			How do these relate to what I already know?	
		</li>
		<li>
			What went well? 	
		</li>
		<li>
			What could have gone better? 	
		</li>
		<li>
			What might I need to learn for better mastery, or what strategies might I use the next time to get better results?
		</li>
	</ul>

	  <p class='lead'>
	  	You will learn how to use hints properly and when to read the discussion threads. I want to help you and Live Coding Session can kickstart your coding interview preparation. It's you and me for 15 minutes. We will work through a coding interview problem.
	  </p>


	  <div class="card">
	    <h5 class="card-header">
	      Critical Elements in Solving a Coding Problem
	    </h5>

	    <div class="card-body">
	      <blockquote class="blockquote mb-0">
	        <p class='lead'>
				You will learn how to apply key aspects of computational thinking such as:
				<ol>
					<li>Problem Reformulation: </li>
						<p>Reframe a problem into a solvable and familiar one.</p>
					<li>Recursion: </li>
						<p>Construct a system incrementally based on preceding information.</p>
					<li>Problem Decomposition: </li>
						<p>Dissect a complex problem into manageable parts. The divided parts are functional elements that collectively comprise the whole problem.</p>
					<li>Abstraction: </li>
						<p>Model the core aspects of complex problems.</p>
					<li>Systematic Testing: </li>
						<p>Detect and identify errors, and then fix the errors, when a solution does not work as it should.</p>
					<li>Efficiency: </li>
						<p>Design the fewest number of steps to solve a problem, removing redundant and unnecessary steps.</p>
					<li>Verbalizing: </li>
						<p>Thinking out aloud when you are solving a coding problem is a skill. This is critical during a whiteboard interview.</p>
				</ol>    
			</p>
	      </blockquote>

	        <blockquote class="blockquote mb-0">
	          <p class='lead'>
				You will also develop your pattern recognition skills (identify underlying patterns) and learn how to build models. Modeling is about building models to represent how a system operates and how a system will function in the future.
			  </p>
	        </blockquote>

	    </div>
	  </div>





	  <div class="card">
	    <h5 class="card-header">
	      Tweets from Developers
	    </h5>

	    <div class="card-body">
	      <blockquote class="blockquote mb-0">
	        <p class='lead'>
The act of presenting a concept to a group means I have to do some research / practice it so I can effectively communicate the edges better.
			</p>
	        <footer class="blockquote-footer"><cite title="Source Title">Jacob Glide</cite></footer>
	      </blockquote>
	    </div>
	    <div class="card-body">
	      <blockquote class="blockquote mb-0">
	        <p class='lead'>
I like to look at what other people have done and conceptualize how I might do it differently. To see if I can optimize it any better, or alternatively if I learn something new from them (a thought process I hadn't thought about yet). 
			  </p>
	        <footer class="blockquote-footer"> <cite title="Source Title">Matthew Maxwell</cite></footer>
	      </blockquote>
	    </div>
		
	    <div class="card-body">
	      <blockquote class="blockquote mb-0">
	        <p class='lead'>
				These are some tips on how some of the best software developers learn. These critical elements are built into this Coding Skills Mastery Program.
			</p>
	      </blockquote>
	    </div>
	  </div>	  



	<h4>Four Stages in Skills Progression</h4>
	<p class='lead'>
		Automaticity is the ability to do things without occupying the mind with the low-level details required, allowing it to become an automatic response pattern or habit. It is usually the result of learning, repetition and practice. There are four stages in skills progression.	
	</p>
	
  	<p><img src="https://www.codingskill.net/assets/images/skills.jpg" alt="Skills Progression" /></p>



Bullets

- List the benefits
- Reasons to keep reading and to make a decision
- Summarize what they are buying
- Build curiosity
- Explain the product what it will do for them

It ________________ so you can _______________ which means ____WHY IS THAT IMPORTANT?____________.
It ________________ so you can _______________ which means {you will ____________________}.
It ________________ so you can _______________ which means {you can ____________________}.
It ________________ so you can _______________ which means {you don't have to ____________________}.

When to look at the solution and what to look for in other solutions
How looking at the solution can be detrimental to your learning in the long run



Love for _____________
Hate 
Fear of _____________ (failure, making mistakes, loss etc)
Vanity
Pride
Longing for _____________ (fulfillment, achievement etc)
Greed 
Freedom

FEATURE + BENEFIT + MEANING
WHAT IT IS + WHAT IT DOES + WHAT IT MEANS TO THE BUYER

The sure-fire secret to NOT needing to memorize the solution to a given problem while enjoying tackling challenging problems.
How to quickly avoid the #1 Mistake developers make that causes them to perform poorly...so you can perform with flying colors in the coding interview.
A step-by-step explanation of how to actually approach any coding problem and formulate a strategy for solving it.
The absolute "bullet-proof" sequence to follow and stay on track to finish coding the solution within given time frame.



Other training videos give you few minutes to think about the problem. We expand that few minutes of that time to one to two hour and we think out aloud and build on top of each other's ideas. This way you will never forget the solution to the problem. There is no need to memorize because you will reason about every decision you have to make to arrive at the solution.

The knowledge you acquire this way sticks.


